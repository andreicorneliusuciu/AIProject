package searchclient;

import java.io.IOException;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.LinkedList;
import java.util.List;
import java.util.Map;

import searchclient.Strategy.StrategyBFS;
import searchclient.Strategy.StrategyDFS;

public class Planner {

	public Agent agent;
	public Node state;
	// public Node trueState;// the current state of the agents plan. NOT
	// agent.initialstate!!
	// we need the initialState of the agent to see everything but the other
	// agents goals.

	List<Position> positions = new ArrayList<Position>();
	List<Node> plan = new ArrayList<Node>();
	List<Type> plantoPrint = new ArrayList<Type>();
	// public LinkedList<Node> solution = new LinkedList<Node>();
	public int trappedAgent;

	private static enum Type {
		MoveBoxToGoal, StoreBox, FreeAgent
	};

	public Planner(Agent theAgent) {

		// System.err.println("FindStorage for");
		// System.err.println(theAgent.initialState);
		// solution = null;
		// plan.clear();
		positions = Heuristic.findStorage(theAgent.initialState);
		Heuristic.storageSpace = positions;
		// System.err.println(positions.toString());

		this.agent = theAgent;

		System.err.println("DEGUB " + agent);
		this.state = theAgent.initialState;
		// this.state.printGoals();

		updateGoalStates(this.state);
		System.err.println("InitialState goals: " + state.goals2);

		// HOWTHINGSWORK highest level commands generate goalastates to
		// be achieved by normal moves.

	}

	public LinkedList<Node> findSolution() {
		LinkedList<Node> solution = new LinkedList<Node>();

		// updateGoalStates(this.state);

		Node thePlan = findHighestPlan(this.agent, this.state); // returns goal
		// state

		Strategy strategy = new StrategyBFS();

		strategy.clearFrontier();
		// System.err.println(
		// "HighestSolution--========================>>>>>>>>>: " + solution + "
		// END<=====================");

		// updateGoalStates(this.state);

		solution = implementHighPlan(thePlan, this.state, strategy);

		// System.err.println(
		// "HighestSolution--========================>>>>>>>>>: " + solution + "
		// END<=====================");
		return solution;
	}

	private Node MoveBoxToGoal(Node node, Box box, Goal goal) {
		// find box and goal in the node and update their values


		Node newState = node.Copy();

		Position goalPos = null;



		// find the goal position
		if (!newState.goals2.contains(goal)) {

			System.err.println("404: Goal not found. Shit");
			return null;
		} else {
			for (Goal g : newState.goals2) {

				if (g.name.equals(goal.name) && !g.isSatisfied) {
					// TODO pick highest priority goal first!!!!
					goalPos = g.position;
					break;

				}
			}

		}

//TODO this overlaps the freeagent stuff		
		

		
		// find the box, set its position to goalPosition
		// if (!newState.boxes2.contains(box)) {
		// System.err.println("404: Box not found. Shit");
		// return null;
		// } else {
		// for (Box b : newState.boxes2) {
		//
		// System.err.println("inboxtogoal "+b.position);
		//
		// if (b.name.equals(box.name)) {
		// b.position = goalPos;
		// System.err.println("inboxtogoal "+b.position);
		//
		// break;
		// }
		// }
		//
		// }


		char[][] newGoalState = newState.goals;
	


		for (int i = 0; i < Node.MAX_ROW; i++)
			for (int j = 0; j < Node.MAX_COL; j++) {
				if ('a' <= newGoalState[i][j] && newGoalState[i][j] <= 'z') {
					//System.err.println("moar " + newGoalState[i][j]);
					newGoalState[i][j] = 0;
					//System.err.println("moar2 " + newGoalState[i][j]);
				}
			}


		// fill it with the new goals bellow

		// boolean flag = false;
		if (!newState.boxes2.contains(box)) {
			System.err.println("404: Box not found. Shit");
			return null;
		} else {
			// name it a random goal name of those the agent has
			newGoalState[goalPos.row][goalPos.col] = node.goals2.get(0).name;
		}

		

		
		// put in the newstate the new goals
		newState.goals = newGoalState;

		System.err.println("Goal made in: " + goalPos);

		return newState;

	}

	private Node FreeAgent(Node node, Agent agent) {
		// look if the agent has isTrapped = true. Move same
		// colored boxes to storage by turning storage into goal state and
		// erasing existing goal states
		// Always calls StoreBox()

		Node newState = node;
		// char[][] newGoalState = null;

		if (!agent.isTrapped) {

			return null;
		}

		trappedAgent = agent.name;

		List<Box> blockingBoxes = new ArrayList<Box>();

		// find blocking boxes in node
		for (Box b : newState.boxes2) {
			if (b.isBlocking) {
				blockingBoxes.add(b);
				System.err.println("blockingboxes: " + blockingBoxes);
			}
		}

		if (!blockingBoxes.isEmpty()) {
			for (Box b : blockingBoxes) {
				// the new node with the goal set to where the boxes should be
				// stored

				newState = StoreBox(newState, b); // problem when we have many
													// boxes of the same color

				// System.err.println("Newstate generated by StoreBoxes: " +
				// newState);
				// break;

			}
		}

		// not sure
		// agent.initialState = newState;
		// SearchClient.agents.get(agent.name).initialState = newState;

		return newState;
	}

	private Node StoreBox(Node node, Box box) {
		// TODO if no isStorage cells exist ?

		Node newState = node;

		float length = 1000;
		Position shortestPos = null;

		// find shortest manhattan distance available position

		if (!Heuristic.storageSpace.isEmpty()) {
			for (Position p : Heuristic.storageSpace) {
				if (Position.manhattanDistance(p, box.position) < length && !p.equals(box.position)) {
					length = (Math.abs((p.row - box.position.row) + Math.abs((p.col - box.position.col))));
					shortestPos = p;
				}
			}

		} else {
			System.err.println("No storage space available");
			// TODO what to do if no space available. Maybe move randomly.
			return null;

		}

		// find the box, set its position

		char[][] newGoalState = node.goals.clone();

		// empty the array
		for (int i = 0; i < Node.MAX_ROW; i++)
			for (int j = 0; j < Node.MAX_COL; j++) {
				if ('a' <= newGoalState[i][j] && newGoalState[i][j] <= 'z') {
					System.err.println("moar " + newGoalState[i][j]);
					newGoalState[i][j] = 0;
					System.err.println("moar2 " + newGoalState[i][j]);
				}
			}

		// for (Goal g : node.goals2) {
		//
		// newGoalState[g.position.row][g.position.col] = 0;
		//
		// }

		// fill it with the new goals bellow

		// boolean flag = false;
		if (!newState.boxes2.contains(box)) {
			System.err.println("404: Box not found. Shit");
			return null;
		} else {
			newGoalState[shortestPos.row][shortestPos.col] = node.goals2.get(0).name;
		}
		System.err.println("Goal made in: " + shortestPos);

		// keeping these just in case, erase if cleaning
		// plan.add(newState);
		plantoPrint.add(Type.StoreBox);

		// this is the new node with the updated goalstate

		newState.goals = newGoalState;

		System.err.println("storeBox: ==da=d" + newState);
		return newState;
	}

	private Node findHighestPlan(Agent theAgent, Node currentState) {

		// use that if needed, clean if not. Clean the below error too.
		// char[][] theGoalState = null;
		// System.err.println("Currentstate goals: "+currentState.goals2);

		// TODO Create highest plan, take first highest action, create and
		// return its goalState for further implementation
		for (Agent a : SearchClient.agents) {

			if (a.isTrapped && a.name != theAgent.name) {

				Box blockingBox = findClosestBlockingBox(a, currentState);

				// System.err.println(blockingBox);
				if (blockingBox != null) {

					if (blockingBox.color.equals(agent.color)) {
						// theGoalState = FreeAgent(currentState, a);

						// plan.clear();
						plan.add(FreeAgent(currentState, a));
						System.err.println("Each plan for, freeAgent " + plan);

					}
					// System.err.println("=================>>>>shitt agents: "
					// + SearchClient.agents);

					plantoPrint.add(Type.FreeAgent);
					// System.err.println("GoalState for freeAgent:"+plan);

					break; // only free one agent at a time, then this
							// agent.isTrapped will be false and goes to next
							// one
				}
			} else if (!a.isTrapped) {
				System.err.println("Agent " + a.name + " not trapped.");
			}
		}

		// System.err.println("Goals megoals:" + currentState.goals2+"
		// goals[][]= "+currentState.theAgentColor);

		// TODO find closest box-goal distance and satisfy that first
		for (Goal g : currentState.goals2) {
			Box aBox = null;

			System.err.println("Goal :" + g.name + " ," + g.color + " issatisfied: " + g.isSatisfied);

			if (!g.isSatisfied && g.color == theAgent.color) {
				System.err.println("Goal accepted :" + g.name);

				aBox = findClosestBox(theAgent, currentState);


				plan.add(MoveBoxToGoal(currentState, aBox, g));
				plantoPrint.add(Type.MoveBoxToGoal);

			}
		}

		// Object plantoString;
		System.err.println("HighestPlan: " + plantoPrint + " made by agent: " + theAgent);

		/// System.err.println(" ");
		for (Node na : plan)
			System.err.println("Plan selected: " + na.toString());
		return plan.get(0);

	}

	public LinkedList<Node> implementHighPlan(Node goalState, Node initialNode, Strategy strategy) {
		System.err.format("Search starting with strategy %s.\n", strategy.toString());
		// strategy.clearFrontier();
		System.err.println("Is frontier empty: " + strategy.frontierIsEmpty());
		strategy.addToFrontier(initialNode);

		int iterations = 0;
		while (true) {
			if (iterations == 1000) {
				// System.err.println(strategy.searchStatus());
				iterations = 0;
			}

			if (strategy.frontierIsEmpty()) {

				LinkedList<Node> noOpList = new LinkedList<Node>();
				initialNode.doNoOp = true;
				noOpList.add(initialNode);
				System.err.println("The frontier is empty");
				return noOpList;

			}

			Node leafNode = strategy.getAndRemoveLeaf();
			// System.err.println("Leafn" + leafNode);

			if (leafNode.isGoalState()) {
				LinkedList<Node> theSolution = leafNode.extractPlan();
				// System.err.println("Returns" + theSolution);

				// for(Node n: theSolution)
				// {
				// n.goals = state.goals;
				// }
				System.err.println("ExtractingPlan: " + leafNode.extractPlan());

				return leafNode.extractPlan();
			}

			strategy.addToExplored(leafNode);
			for (Node n : leafNode.getExpandedNodes()) { // The list of expanded
															// nodes is shuffled
															// randomly; see
															// Node.java.
				if (!strategy.isExplored(n) && !strategy.inFrontier(n)) {
					// System.err.println("Adding to frontier:
					// "+n.theAgentName+" "+n);
					strategy.addToFrontier(n);
				}
			}
			iterations++;
		}

	}

	//

	private Box findClosestBlockingBox(Agent trappedAgent, Node node) {

		if (agent == null) {
			System.err.println("Null agent when going into findClosestBox in Planner");
		}

		Box box = null;
		// Position agentPos = trappedAgent.position;
		float minDistance = 10000;

		for (Box b : SearchClient.allBoxes) {

			if (b.color == agent.color && b.isBlocking && Position.manhattanDistance(trappedAgent.position, b.position) < minDistance) {
				minDistance = Position.manhattanDistance(trappedAgent.position, b.position);
				box = b;

				// System.err.println("Box found for agent "+trappedAgent+" box
				// is: "+box);
			}
		}

		if (box == null)
			System.err.println("No blocking Box found");

		return box;
	}

	private Box findClosestBox(Agent thisAgent, Node node) // of same color
	{

		if (thisAgent == null) {
			System.err.println("Null agent when going into findClosestBox in Planner");
		}

		Box box = null;
		// Position agentPos = trappedAgent.position;
		float minDistance = 10000;

		for (Box b : node.boxes2) {

			if (b.color == thisAgent.color && Position.manhattanDistance(thisAgent.position, b.position) < minDistance) {
				minDistance = Position.manhattanDistance(thisAgent.position, b.position);
				box = b;

				// System.err.println("Box found for agent "+agent+" , box is:
				// "+box);
			}
		}

		if (box == null)
			System.err.println("No Box found");

		return box;
	}

	// updates the status of all goals for a given node (agent sees and updates
	// only his own goals!!!)
	public void updateGoalStates(Node node) {
		List<Goal> goals = node.goals2;
		List<Box> boxes = node.boxes2;

		// for (Goal g : goals) {
		// for (Box b : boxes) {
		// if (b.position == g.position && Character.toLowerCase(b.name) ==
		// g.name) {
		// g.isSatisfied = true;
		// }
		//
		// }
		// }

		for (int row = 1; row < Node.MAX_ROW; row++) {
			for (int col = 1; col < Node.MAX_COL; col++) {
				char g = node.goals[row][col];
				char b = Character.toLowerCase(node.boxes[row][col]);
				// if (g > 0 && b != g) {
				//
				// }
				// satisfy goals
				if (g > 0) {
					for (Goal gl : goals) {
						if (gl.name == g && gl.position.equals(new Position(row, col))) {
							if (b == g) {
								gl.isSatisfied = true;

							} else if (b == 0) {
								gl.isSatisfied = false;
							}
						}
					}
				}
			}
		}

		node.goals2 = goals;
		node.boxes2 = boxes;

	}

	// checks if the goals for a given node are satisfied (agent sees only his
	// own goals!!!)
	private boolean isGoalState(Node node) {
		// TODO set isSatisfied properly
		for (Goal g : node.goals2) {
			if (!(g.isSatisfied == true)) {
				return false;
			}
		}

		return true;
	}

	public Type getFreeAgent() {
		// Auto-generated method stub
		return Type.FreeAgent;
	}

}